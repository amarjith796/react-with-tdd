// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EditTodo should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <EditTodo
    editText=""
    handleUpdateTodo={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Formsy
        disabled={false}
        getErrorMessage={[Function]}
        getErrorMessages={[Function]}
        getValue={[Function]}
        hasValue={[Function]}
        isFormDisabled={[Function]}
        isFormSubmitted={[Function]}
        isPristine={[Function]}
        isRequired={[Function]}
        isValid={[Function]}
        isValidValue={[Function]}
        mapping={null}
        onChange={[Function]}
        onError={[Function]}
        onInvalid={[Function]}
        onInvalidSubmit={[Function]}
        onReset={[Function]}
        onSubmit={[Function]}
        onValid={[Function]}
        onValidSubmit={[Function]}
        preventExternalInvalidation={false}
        resetValue={[Function]}
        setValidations={[Function]}
        setValue={[Function]}
        showError={[Function]}
        showRequired={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
        validationErrors={null}
      >
        <Formsy(MyInput)
          name="text"
          required={true}
          validationError="Please enter the taskname"
          validationErrors={Object {}}
          validations="isNotBlankString"
          value=""
        />
        <button
          disabled={true}
          style={
            Object {
              "background": "steelblue",
              "border": "1px solid steelblue",
              "cursor": "pointer",
              "padding": "10px",
            }
          }
          type="submit"
        >
          Submit
        </button>
      </Formsy>,
      "style": Object {
        "display": "flex",
        "width": "500px",
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Formsy(MyInput)
            name="text"
            required={true}
            validationError="Please enter the taskname"
            validationErrors={Object {}}
            validations="isNotBlankString"
            value=""
          />,
          <button
            disabled={true}
            style={
              Object {
                "background": "steelblue",
                "border": "1px solid steelblue",
                "cursor": "pointer",
                "padding": "10px",
              }
            }
            type="submit"
          >
            Submit
          </button>,
        ],
        "disabled": false,
        "getErrorMessage": [Function],
        "getErrorMessages": [Function],
        "getValue": [Function],
        "hasValue": [Function],
        "isFormDisabled": [Function],
        "isFormSubmitted": [Function],
        "isPristine": [Function],
        "isRequired": [Function],
        "isValid": [Function],
        "isValidValue": [Function],
        "mapping": null,
        "onChange": [Function],
        "onError": [Function],
        "onInvalid": [Function],
        "onInvalidSubmit": [Function],
        "onReset": [Function],
        "onSubmit": [Function],
        "onValid": [Function],
        "onValidSubmit": [Function],
        "preventExternalInvalidation": false,
        "resetValue": [Function],
        "setValidations": [Function],
        "setValue": [Function],
        "showError": [Function],
        "showRequired": [Function],
        "style": Object {
          "flex": 1,
        },
        "validationErrors": null,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "name": "text",
            "required": true,
            "validationError": "Please enter the taskname",
            "validationErrors": Object {},
            "validations": "isNotBlankString",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Submit",
            "disabled": true,
            "style": Object {
              "background": "steelblue",
              "border": "1px solid steelblue",
              "cursor": "pointer",
              "padding": "10px",
            },
            "type": "submit",
          },
          "ref": null,
          "rendered": "Submit",
          "type": "button",
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Formsy
          disabled={false}
          getErrorMessage={[Function]}
          getErrorMessages={[Function]}
          getValue={[Function]}
          hasValue={[Function]}
          isFormDisabled={[Function]}
          isFormSubmitted={[Function]}
          isPristine={[Function]}
          isRequired={[Function]}
          isValid={[Function]}
          isValidValue={[Function]}
          mapping={null}
          onChange={[Function]}
          onError={[Function]}
          onInvalid={[Function]}
          onInvalidSubmit={[Function]}
          onReset={[Function]}
          onSubmit={[Function]}
          onValid={[Function]}
          onValidSubmit={[Function]}
          preventExternalInvalidation={false}
          resetValue={[Function]}
          setValidations={[Function]}
          setValue={[Function]}
          showError={[Function]}
          showRequired={[Function]}
          style={
            Object {
              "flex": 1,
            }
          }
          validationErrors={null}
        >
          <Formsy(MyInput)
            name="text"
            required={true}
            validationError="Please enter the taskname"
            validationErrors={Object {}}
            validations="isNotBlankString"
            value=""
          />
          <button
            disabled={true}
            style={
              Object {
                "background": "steelblue",
                "border": "1px solid steelblue",
                "cursor": "pointer",
                "padding": "10px",
              }
            }
            type="submit"
          >
            Submit
          </button>
        </Formsy>,
        "style": Object {
          "display": "flex",
          "width": "500px",
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Formsy(MyInput)
              name="text"
              required={true}
              validationError="Please enter the taskname"
              validationErrors={Object {}}
              validations="isNotBlankString"
              value=""
            />,
            <button
              disabled={true}
              style={
                Object {
                  "background": "steelblue",
                  "border": "1px solid steelblue",
                  "cursor": "pointer",
                  "padding": "10px",
                }
              }
              type="submit"
            >
              Submit
            </button>,
          ],
          "disabled": false,
          "getErrorMessage": [Function],
          "getErrorMessages": [Function],
          "getValue": [Function],
          "hasValue": [Function],
          "isFormDisabled": [Function],
          "isFormSubmitted": [Function],
          "isPristine": [Function],
          "isRequired": [Function],
          "isValid": [Function],
          "isValidValue": [Function],
          "mapping": null,
          "onChange": [Function],
          "onError": [Function],
          "onInvalid": [Function],
          "onInvalidSubmit": [Function],
          "onReset": [Function],
          "onSubmit": [Function],
          "onValid": [Function],
          "onValidSubmit": [Function],
          "preventExternalInvalidation": false,
          "resetValue": [Function],
          "setValidations": [Function],
          "setValue": [Function],
          "showError": [Function],
          "showRequired": [Function],
          "style": Object {
            "flex": 1,
          },
          "validationErrors": null,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "name": "text",
              "required": true,
              "validationError": "Please enter the taskname",
              "validationErrors": Object {},
              "validations": "isNotBlankString",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Submit",
              "disabled": true,
              "style": Object {
                "background": "steelblue",
                "border": "1px solid steelblue",
                "cursor": "pointer",
                "padding": "10px",
              },
              "type": "submit",
            },
            "ref": null,
            "rendered": "Submit",
            "type": "button",
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
